// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/inspector/protocol/DOM.h"

#include "src/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace v8_inspector {
namespace protocol {
namespace DOM {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "DOM";
const char Metainfo::commandPrefix[] = "DOM.";
const char Metainfo::version[] = "1.3";

std::unique_ptr<BackendNode> BackendNode::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<BackendNode> result(new BackendNode());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeTypeValue = object->get("nodeType");
    errors->SetName("nodeType");
    result->m_nodeType = ValueConversions<int>::fromValue(nodeTypeValue, errors);
    protocol::Value* nodeNameValue = object->get("nodeName");
    errors->SetName("nodeName");
    result->m_nodeName = ValueConversions<String>::fromValue(nodeNameValue, errors);
    protocol::Value* backendNodeIdValue = object->get("backendNodeId");
    errors->SetName("backendNodeId");
    result->m_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> BackendNode::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeType", ValueConversions<int>::toValue(m_nodeType));
    result->setValue("nodeName", ValueConversions<String>::toValue(m_nodeName));
    result->setValue("backendNodeId", ValueConversions<int>::toValue(m_backendNodeId));
    return result;
}

void BackendNode::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeType"), m_nodeType, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeName"), m_nodeName, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("backendNodeId"), m_backendNodeId, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<BackendNode> BackendNode::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

namespace PseudoTypeEnum {
const char FirstLine[] = "first-line";
const char FirstLetter[] = "first-letter";
const char Before[] = "before";
const char After[] = "after";
const char Marker[] = "marker";
const char Backdrop[] = "backdrop";
const char Selection[] = "selection";
const char FirstLineInherited[] = "first-line-inherited";
const char Scrollbar[] = "scrollbar";
const char ScrollbarThumb[] = "scrollbar-thumb";
const char ScrollbarButton[] = "scrollbar-button";
const char ScrollbarTrack[] = "scrollbar-track";
const char ScrollbarTrackPiece[] = "scrollbar-track-piece";
const char ScrollbarCorner[] = "scrollbar-corner";
const char Resizer[] = "resizer";
const char InputListButton[] = "input-list-button";
} // namespace PseudoTypeEnum

namespace ShadowRootTypeEnum {
const char UserAgent[] = "user-agent";
const char Open[] = "open";
const char Closed[] = "closed";
} // namespace ShadowRootTypeEnum

std::unique_ptr<Node> Node::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<Node> result(new Node());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeIdValue = object->get("nodeId");
    errors->SetName("nodeId");
    result->m_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* parentIdValue = object->get("parentId");
    if (parentIdValue) {
        errors->SetName("parentId");
        result->m_parentId = ValueConversions<int>::fromValue(parentIdValue, errors);
    }
    protocol::Value* backendNodeIdValue = object->get("backendNodeId");
    errors->SetName("backendNodeId");
    result->m_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    protocol::Value* nodeTypeValue = object->get("nodeType");
    errors->SetName("nodeType");
    result->m_nodeType = ValueConversions<int>::fromValue(nodeTypeValue, errors);
    protocol::Value* nodeNameValue = object->get("nodeName");
    errors->SetName("nodeName");
    result->m_nodeName = ValueConversions<String>::fromValue(nodeNameValue, errors);
    protocol::Value* localNameValue = object->get("localName");
    errors->SetName("localName");
    result->m_localName = ValueConversions<String>::fromValue(localNameValue, errors);
    protocol::Value* nodeValueValue = object->get("nodeValue");
    errors->SetName("nodeValue");
    result->m_nodeValue = ValueConversions<String>::fromValue(nodeValueValue, errors);
    protocol::Value* childNodeCountValue = object->get("childNodeCount");
    if (childNodeCountValue) {
        errors->SetName("childNodeCount");
        result->m_childNodeCount = ValueConversions<int>::fromValue(childNodeCountValue, errors);
    }
    protocol::Value* childrenValue = object->get("children");
    if (childrenValue) {
        errors->SetName("children");
        result->m_children = ValueConversions<protocol::Array<protocol::DOM::Node>>::fromValue(childrenValue, errors);
    }
    protocol::Value* attributesValue = object->get("attributes");
    if (attributesValue) {
        errors->SetName("attributes");
        result->m_attributes = ValueConversions<protocol::Array<String>>::fromValue(attributesValue, errors);
    }
    protocol::Value* documentURLValue = object->get("documentURL");
    if (documentURLValue) {
        errors->SetName("documentURL");
        result->m_documentURL = ValueConversions<String>::fromValue(documentURLValue, errors);
    }
    protocol::Value* baseURLValue = object->get("baseURL");
    if (baseURLValue) {
        errors->SetName("baseURL");
        result->m_baseURL = ValueConversions<String>::fromValue(baseURLValue, errors);
    }
    protocol::Value* publicIdValue = object->get("publicId");
    if (publicIdValue) {
        errors->SetName("publicId");
        result->m_publicId = ValueConversions<String>::fromValue(publicIdValue, errors);
    }
    protocol::Value* systemIdValue = object->get("systemId");
    if (systemIdValue) {
        errors->SetName("systemId");
        result->m_systemId = ValueConversions<String>::fromValue(systemIdValue, errors);
    }
    protocol::Value* internalSubsetValue = object->get("internalSubset");
    if (internalSubsetValue) {
        errors->SetName("internalSubset");
        result->m_internalSubset = ValueConversions<String>::fromValue(internalSubsetValue, errors);
    }
    protocol::Value* xmlVersionValue = object->get("xmlVersion");
    if (xmlVersionValue) {
        errors->SetName("xmlVersion");
        result->m_xmlVersion = ValueConversions<String>::fromValue(xmlVersionValue, errors);
    }
    protocol::Value* nameValue = object->get("name");
    if (nameValue) {
        errors->SetName("name");
        result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    }
    protocol::Value* valueValue = object->get("value");
    if (valueValue) {
        errors->SetName("value");
        result->m_value = ValueConversions<String>::fromValue(valueValue, errors);
    }
    protocol::Value* pseudoTypeValue = object->get("pseudoType");
    if (pseudoTypeValue) {
        errors->SetName("pseudoType");
        result->m_pseudoType = ValueConversions<String>::fromValue(pseudoTypeValue, errors);
    }
    protocol::Value* shadowRootTypeValue = object->get("shadowRootType");
    if (shadowRootTypeValue) {
        errors->SetName("shadowRootType");
        result->m_shadowRootType = ValueConversions<String>::fromValue(shadowRootTypeValue, errors);
    }
    protocol::Value* frameIdValue = object->get("frameId");
    if (frameIdValue) {
        errors->SetName("frameId");
        result->m_frameId = ValueConversions<String>::fromValue(frameIdValue, errors);
    }
    protocol::Value* contentDocumentValue = object->get("contentDocument");
    if (contentDocumentValue) {
        errors->SetName("contentDocument");
        result->m_contentDocument = ValueConversions<protocol::DOM::Node>::fromValue(contentDocumentValue, errors);
    }
    protocol::Value* shadowRootsValue = object->get("shadowRoots");
    if (shadowRootsValue) {
        errors->SetName("shadowRoots");
        result->m_shadowRoots = ValueConversions<protocol::Array<protocol::DOM::Node>>::fromValue(shadowRootsValue, errors);
    }
    protocol::Value* templateContentValue = object->get("templateContent");
    if (templateContentValue) {
        errors->SetName("templateContent");
        result->m_templateContent = ValueConversions<protocol::DOM::Node>::fromValue(templateContentValue, errors);
    }
    protocol::Value* pseudoElementsValue = object->get("pseudoElements");
    if (pseudoElementsValue) {
        errors->SetName("pseudoElements");
        result->m_pseudoElements = ValueConversions<protocol::Array<protocol::DOM::Node>>::fromValue(pseudoElementsValue, errors);
    }
    protocol::Value* importedDocumentValue = object->get("importedDocument");
    if (importedDocumentValue) {
        errors->SetName("importedDocument");
        result->m_importedDocument = ValueConversions<protocol::DOM::Node>::fromValue(importedDocumentValue, errors);
    }
    protocol::Value* distributedNodesValue = object->get("distributedNodes");
    if (distributedNodesValue) {
        errors->SetName("distributedNodes");
        result->m_distributedNodes = ValueConversions<protocol::Array<protocol::DOM::BackendNode>>::fromValue(distributedNodesValue, errors);
    }
    protocol::Value* isSVGValue = object->get("isSVG");
    if (isSVGValue) {
        errors->SetName("isSVG");
        result->m_isSVG = ValueConversions<bool>::fromValue(isSVGValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> Node::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeId", ValueConversions<int>::toValue(m_nodeId));
    if (m_parentId.isJust())
        result->setValue("parentId", ValueConversions<int>::toValue(m_parentId.fromJust()));
    result->setValue("backendNodeId", ValueConversions<int>::toValue(m_backendNodeId));
    result->setValue("nodeType", ValueConversions<int>::toValue(m_nodeType));
    result->setValue("nodeName", ValueConversions<String>::toValue(m_nodeName));
    result->setValue("localName", ValueConversions<String>::toValue(m_localName));
    result->setValue("nodeValue", ValueConversions<String>::toValue(m_nodeValue));
    if (m_childNodeCount.isJust())
        result->setValue("childNodeCount", ValueConversions<int>::toValue(m_childNodeCount.fromJust()));
    if (m_children.isJust())
        result->setValue("children", ValueConversions<protocol::Array<protocol::DOM::Node>>::toValue(m_children.fromJust()));
    if (m_attributes.isJust())
        result->setValue("attributes", ValueConversions<protocol::Array<String>>::toValue(m_attributes.fromJust()));
    if (m_documentURL.isJust())
        result->setValue("documentURL", ValueConversions<String>::toValue(m_documentURL.fromJust()));
    if (m_baseURL.isJust())
        result->setValue("baseURL", ValueConversions<String>::toValue(m_baseURL.fromJust()));
    if (m_publicId.isJust())
        result->setValue("publicId", ValueConversions<String>::toValue(m_publicId.fromJust()));
    if (m_systemId.isJust())
        result->setValue("systemId", ValueConversions<String>::toValue(m_systemId.fromJust()));
    if (m_internalSubset.isJust())
        result->setValue("internalSubset", ValueConversions<String>::toValue(m_internalSubset.fromJust()));
    if (m_xmlVersion.isJust())
        result->setValue("xmlVersion", ValueConversions<String>::toValue(m_xmlVersion.fromJust()));
    if (m_name.isJust())
        result->setValue("name", ValueConversions<String>::toValue(m_name.fromJust()));
    if (m_value.isJust())
        result->setValue("value", ValueConversions<String>::toValue(m_value.fromJust()));
    if (m_pseudoType.isJust())
        result->setValue("pseudoType", ValueConversions<String>::toValue(m_pseudoType.fromJust()));
    if (m_shadowRootType.isJust())
        result->setValue("shadowRootType", ValueConversions<String>::toValue(m_shadowRootType.fromJust()));
    if (m_frameId.isJust())
        result->setValue("frameId", ValueConversions<String>::toValue(m_frameId.fromJust()));
    if (m_contentDocument.isJust())
        result->setValue("contentDocument", ValueConversions<protocol::DOM::Node>::toValue(m_contentDocument.fromJust()));
    if (m_shadowRoots.isJust())
        result->setValue("shadowRoots", ValueConversions<protocol::Array<protocol::DOM::Node>>::toValue(m_shadowRoots.fromJust()));
    if (m_templateContent.isJust())
        result->setValue("templateContent", ValueConversions<protocol::DOM::Node>::toValue(m_templateContent.fromJust()));
    if (m_pseudoElements.isJust())
        result->setValue("pseudoElements", ValueConversions<protocol::Array<protocol::DOM::Node>>::toValue(m_pseudoElements.fromJust()));
    if (m_importedDocument.isJust())
        result->setValue("importedDocument", ValueConversions<protocol::DOM::Node>::toValue(m_importedDocument.fromJust()));
    if (m_distributedNodes.isJust())
        result->setValue("distributedNodes", ValueConversions<protocol::Array<protocol::DOM::BackendNode>>::toValue(m_distributedNodes.fromJust()));
    if (m_isSVG.isJust())
        result->setValue("isSVG", ValueConversions<bool>::toValue(m_isSVG.fromJust()));
    return result;
}

void Node::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), m_nodeId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("parentId"), m_parentId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("backendNodeId"), m_backendNodeId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeType"), m_nodeType, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeName"), m_nodeName, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("localName"), m_localName, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeValue"), m_nodeValue, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("childNodeCount"), m_childNodeCount, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("children"), m_children, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("attributes"), m_attributes, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("documentURL"), m_documentURL, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("baseURL"), m_baseURL, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("publicId"), m_publicId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("systemId"), m_systemId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("internalSubset"), m_internalSubset, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("xmlVersion"), m_xmlVersion, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("name"), m_name, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("value"), m_value, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("pseudoType"), m_pseudoType, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("shadowRootType"), m_shadowRootType, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("frameId"), m_frameId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("contentDocument"), m_contentDocument, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("shadowRoots"), m_shadowRoots, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("templateContent"), m_templateContent, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("pseudoElements"), m_pseudoElements, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("importedDocument"), m_importedDocument, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("distributedNodes"), m_distributedNodes, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("isSVG"), m_isSVG, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<Node> Node::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<RGBA> RGBA::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<RGBA> result(new RGBA());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* rValue = object->get("r");
    errors->SetName("r");
    result->m_r = ValueConversions<int>::fromValue(rValue, errors);
    protocol::Value* gValue = object->get("g");
    errors->SetName("g");
    result->m_g = ValueConversions<int>::fromValue(gValue, errors);
    protocol::Value* bValue = object->get("b");
    errors->SetName("b");
    result->m_b = ValueConversions<int>::fromValue(bValue, errors);
    protocol::Value* aValue = object->get("a");
    if (aValue) {
        errors->SetName("a");
        result->m_a = ValueConversions<double>::fromValue(aValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> RGBA::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("r", ValueConversions<int>::toValue(m_r));
    result->setValue("g", ValueConversions<int>::toValue(m_g));
    result->setValue("b", ValueConversions<int>::toValue(m_b));
    if (m_a.isJust())
        result->setValue("a", ValueConversions<double>::toValue(m_a.fromJust()));
    return result;
}

void RGBA::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("r"), m_r, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("g"), m_g, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("b"), m_b, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("a"), m_a, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<RGBA> RGBA::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<BoxModel> BoxModel::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<BoxModel> result(new BoxModel());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* contentValue = object->get("content");
    errors->SetName("content");
    result->m_content = ValueConversions<protocol::Array<double>>::fromValue(contentValue, errors);
    protocol::Value* paddingValue = object->get("padding");
    errors->SetName("padding");
    result->m_padding = ValueConversions<protocol::Array<double>>::fromValue(paddingValue, errors);
    protocol::Value* borderValue = object->get("border");
    errors->SetName("border");
    result->m_border = ValueConversions<protocol::Array<double>>::fromValue(borderValue, errors);
    protocol::Value* marginValue = object->get("margin");
    errors->SetName("margin");
    result->m_margin = ValueConversions<protocol::Array<double>>::fromValue(marginValue, errors);
    protocol::Value* widthValue = object->get("width");
    errors->SetName("width");
    result->m_width = ValueConversions<int>::fromValue(widthValue, errors);
    protocol::Value* heightValue = object->get("height");
    errors->SetName("height");
    result->m_height = ValueConversions<int>::fromValue(heightValue, errors);
    protocol::Value* shapeOutsideValue = object->get("shapeOutside");
    if (shapeOutsideValue) {
        errors->SetName("shapeOutside");
        result->m_shapeOutside = ValueConversions<protocol::DOM::ShapeOutsideInfo>::fromValue(shapeOutsideValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> BoxModel::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("content", ValueConversions<protocol::Array<double>>::toValue(m_content.get()));
    result->setValue("padding", ValueConversions<protocol::Array<double>>::toValue(m_padding.get()));
    result->setValue("border", ValueConversions<protocol::Array<double>>::toValue(m_border.get()));
    result->setValue("margin", ValueConversions<protocol::Array<double>>::toValue(m_margin.get()));
    result->setValue("width", ValueConversions<int>::toValue(m_width));
    result->setValue("height", ValueConversions<int>::toValue(m_height));
    if (m_shapeOutside.isJust())
        result->setValue("shapeOutside", ValueConversions<protocol::DOM::ShapeOutsideInfo>::toValue(m_shapeOutside.fromJust()));
    return result;
}

void BoxModel::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("content"), m_content, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("padding"), m_padding, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("border"), m_border, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("margin"), m_margin, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("width"), m_width, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("height"), m_height, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("shapeOutside"), m_shapeOutside, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<BoxModel> BoxModel::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ShapeOutsideInfo> ShapeOutsideInfo::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ShapeOutsideInfo> result(new ShapeOutsideInfo());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* boundsValue = object->get("bounds");
    errors->SetName("bounds");
    result->m_bounds = ValueConversions<protocol::Array<double>>::fromValue(boundsValue, errors);
    protocol::Value* shapeValue = object->get("shape");
    errors->SetName("shape");
    result->m_shape = ValueConversions<protocol::Array<protocol::Value>>::fromValue(shapeValue, errors);
    protocol::Value* marginShapeValue = object->get("marginShape");
    errors->SetName("marginShape");
    result->m_marginShape = ValueConversions<protocol::Array<protocol::Value>>::fromValue(marginShapeValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ShapeOutsideInfo::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("bounds", ValueConversions<protocol::Array<double>>::toValue(m_bounds.get()));
    result->setValue("shape", ValueConversions<protocol::Array<protocol::Value>>::toValue(m_shape.get()));
    result->setValue("marginShape", ValueConversions<protocol::Array<protocol::Value>>::toValue(m_marginShape.get()));
    return result;
}

void ShapeOutsideInfo::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("bounds"), m_bounds, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("shape"), m_shape, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("marginShape"), m_marginShape, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ShapeOutsideInfo> ShapeOutsideInfo::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<Rect> Rect::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<Rect> result(new Rect());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* xValue = object->get("x");
    errors->SetName("x");
    result->m_x = ValueConversions<double>::fromValue(xValue, errors);
    protocol::Value* yValue = object->get("y");
    errors->SetName("y");
    result->m_y = ValueConversions<double>::fromValue(yValue, errors);
    protocol::Value* widthValue = object->get("width");
    errors->SetName("width");
    result->m_width = ValueConversions<double>::fromValue(widthValue, errors);
    protocol::Value* heightValue = object->get("height");
    errors->SetName("height");
    result->m_height = ValueConversions<double>::fromValue(heightValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> Rect::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("x", ValueConversions<double>::toValue(m_x));
    result->setValue("y", ValueConversions<double>::toValue(m_y));
    result->setValue("width", ValueConversions<double>::toValue(m_width));
    result->setValue("height", ValueConversions<double>::toValue(m_height));
    return result;
}

void Rect::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("x"), m_x, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("y"), m_y, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("width"), m_width, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("height"), m_height, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<Rect> Rect::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<AttributeModifiedNotification> AttributeModifiedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<AttributeModifiedNotification> result(new AttributeModifiedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeIdValue = object->get("nodeId");
    errors->SetName("nodeId");
    result->m_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* nameValue = object->get("name");
    errors->SetName("name");
    result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<String>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> AttributeModifiedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeId", ValueConversions<int>::toValue(m_nodeId));
    result->setValue("name", ValueConversions<String>::toValue(m_name));
    result->setValue("value", ValueConversions<String>::toValue(m_value));
    return result;
}

void AttributeModifiedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), m_nodeId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("name"), m_name, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("value"), m_value, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<AttributeModifiedNotification> AttributeModifiedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<AttributeRemovedNotification> AttributeRemovedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<AttributeRemovedNotification> result(new AttributeRemovedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeIdValue = object->get("nodeId");
    errors->SetName("nodeId");
    result->m_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* nameValue = object->get("name");
    errors->SetName("name");
    result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> AttributeRemovedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeId", ValueConversions<int>::toValue(m_nodeId));
    result->setValue("name", ValueConversions<String>::toValue(m_name));
    return result;
}

void AttributeRemovedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), m_nodeId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("name"), m_name, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<AttributeRemovedNotification> AttributeRemovedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<CharacterDataModifiedNotification> CharacterDataModifiedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<CharacterDataModifiedNotification> result(new CharacterDataModifiedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeIdValue = object->get("nodeId");
    errors->SetName("nodeId");
    result->m_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* characterDataValue = object->get("characterData");
    errors->SetName("characterData");
    result->m_characterData = ValueConversions<String>::fromValue(characterDataValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> CharacterDataModifiedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeId", ValueConversions<int>::toValue(m_nodeId));
    result->setValue("characterData", ValueConversions<String>::toValue(m_characterData));
    return result;
}

void CharacterDataModifiedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), m_nodeId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("characterData"), m_characterData, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<CharacterDataModifiedNotification> CharacterDataModifiedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ChildNodeCountUpdatedNotification> ChildNodeCountUpdatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ChildNodeCountUpdatedNotification> result(new ChildNodeCountUpdatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeIdValue = object->get("nodeId");
    errors->SetName("nodeId");
    result->m_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* childNodeCountValue = object->get("childNodeCount");
    errors->SetName("childNodeCount");
    result->m_childNodeCount = ValueConversions<int>::fromValue(childNodeCountValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ChildNodeCountUpdatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeId", ValueConversions<int>::toValue(m_nodeId));
    result->setValue("childNodeCount", ValueConversions<int>::toValue(m_childNodeCount));
    return result;
}

void ChildNodeCountUpdatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), m_nodeId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("childNodeCount"), m_childNodeCount, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ChildNodeCountUpdatedNotification> ChildNodeCountUpdatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ChildNodeInsertedNotification> ChildNodeInsertedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ChildNodeInsertedNotification> result(new ChildNodeInsertedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* parentNodeIdValue = object->get("parentNodeId");
    errors->SetName("parentNodeId");
    result->m_parentNodeId = ValueConversions<int>::fromValue(parentNodeIdValue, errors);
    protocol::Value* previousNodeIdValue = object->get("previousNodeId");
    errors->SetName("previousNodeId");
    result->m_previousNodeId = ValueConversions<int>::fromValue(previousNodeIdValue, errors);
    protocol::Value* nodeValue = object->get("node");
    errors->SetName("node");
    result->m_node = ValueConversions<protocol::DOM::Node>::fromValue(nodeValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ChildNodeInsertedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("parentNodeId", ValueConversions<int>::toValue(m_parentNodeId));
    result->setValue("previousNodeId", ValueConversions<int>::toValue(m_previousNodeId));
    result->setValue("node", ValueConversions<protocol::DOM::Node>::toValue(m_node.get()));
    return result;
}

void ChildNodeInsertedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("parentNodeId"), m_parentNodeId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("previousNodeId"), m_previousNodeId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("node"), m_node, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ChildNodeInsertedNotification> ChildNodeInsertedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ChildNodeRemovedNotification> ChildNodeRemovedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ChildNodeRemovedNotification> result(new ChildNodeRemovedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* parentNodeIdValue = object->get("parentNodeId");
    errors->SetName("parentNodeId");
    result->m_parentNodeId = ValueConversions<int>::fromValue(parentNodeIdValue, errors);
    protocol::Value* nodeIdValue = object->get("nodeId");
    errors->SetName("nodeId");
    result->m_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ChildNodeRemovedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("parentNodeId", ValueConversions<int>::toValue(m_parentNodeId));
    result->setValue("nodeId", ValueConversions<int>::toValue(m_nodeId));
    return result;
}

void ChildNodeRemovedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("parentNodeId"), m_parentNodeId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), m_nodeId, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ChildNodeRemovedNotification> ChildNodeRemovedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<DistributedNodesUpdatedNotification> DistributedNodesUpdatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<DistributedNodesUpdatedNotification> result(new DistributedNodesUpdatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* insertionPointIdValue = object->get("insertionPointId");
    errors->SetName("insertionPointId");
    result->m_insertionPointId = ValueConversions<int>::fromValue(insertionPointIdValue, errors);
    protocol::Value* distributedNodesValue = object->get("distributedNodes");
    errors->SetName("distributedNodes");
    result->m_distributedNodes = ValueConversions<protocol::Array<protocol::DOM::BackendNode>>::fromValue(distributedNodesValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DistributedNodesUpdatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("insertionPointId", ValueConversions<int>::toValue(m_insertionPointId));
    result->setValue("distributedNodes", ValueConversions<protocol::Array<protocol::DOM::BackendNode>>::toValue(m_distributedNodes.get()));
    return result;
}

void DistributedNodesUpdatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("insertionPointId"), m_insertionPointId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("distributedNodes"), m_distributedNodes, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DistributedNodesUpdatedNotification> DistributedNodesUpdatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<InlineStyleInvalidatedNotification> InlineStyleInvalidatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<InlineStyleInvalidatedNotification> result(new InlineStyleInvalidatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeIdsValue = object->get("nodeIds");
    errors->SetName("nodeIds");
    result->m_nodeIds = ValueConversions<protocol::Array<int>>::fromValue(nodeIdsValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> InlineStyleInvalidatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeIds", ValueConversions<protocol::Array<int>>::toValue(m_nodeIds.get()));
    return result;
}

void InlineStyleInvalidatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeIds"), m_nodeIds, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<InlineStyleInvalidatedNotification> InlineStyleInvalidatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<PseudoElementAddedNotification> PseudoElementAddedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PseudoElementAddedNotification> result(new PseudoElementAddedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* parentIdValue = object->get("parentId");
    errors->SetName("parentId");
    result->m_parentId = ValueConversions<int>::fromValue(parentIdValue, errors);
    protocol::Value* pseudoElementValue = object->get("pseudoElement");
    errors->SetName("pseudoElement");
    result->m_pseudoElement = ValueConversions<protocol::DOM::Node>::fromValue(pseudoElementValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PseudoElementAddedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("parentId", ValueConversions<int>::toValue(m_parentId));
    result->setValue("pseudoElement", ValueConversions<protocol::DOM::Node>::toValue(m_pseudoElement.get()));
    return result;
}

void PseudoElementAddedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("parentId"), m_parentId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("pseudoElement"), m_pseudoElement, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PseudoElementAddedNotification> PseudoElementAddedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<PseudoElementRemovedNotification> PseudoElementRemovedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PseudoElementRemovedNotification> result(new PseudoElementRemovedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* parentIdValue = object->get("parentId");
    errors->SetName("parentId");
    result->m_parentId = ValueConversions<int>::fromValue(parentIdValue, errors);
    protocol::Value* pseudoElementIdValue = object->get("pseudoElementId");
    errors->SetName("pseudoElementId");
    result->m_pseudoElementId = ValueConversions<int>::fromValue(pseudoElementIdValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PseudoElementRemovedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("parentId", ValueConversions<int>::toValue(m_parentId));
    result->setValue("pseudoElementId", ValueConversions<int>::toValue(m_pseudoElementId));
    return result;
}

void PseudoElementRemovedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("parentId"), m_parentId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("pseudoElementId"), m_pseudoElementId, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PseudoElementRemovedNotification> PseudoElementRemovedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<SetChildNodesNotification> SetChildNodesNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<SetChildNodesNotification> result(new SetChildNodesNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* parentIdValue = object->get("parentId");
    errors->SetName("parentId");
    result->m_parentId = ValueConversions<int>::fromValue(parentIdValue, errors);
    protocol::Value* nodesValue = object->get("nodes");
    errors->SetName("nodes");
    result->m_nodes = ValueConversions<protocol::Array<protocol::DOM::Node>>::fromValue(nodesValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> SetChildNodesNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("parentId", ValueConversions<int>::toValue(m_parentId));
    result->setValue("nodes", ValueConversions<protocol::Array<protocol::DOM::Node>>::toValue(m_nodes.get()));
    return result;
}

void SetChildNodesNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("parentId"), m_parentId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodes"), m_nodes, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<SetChildNodesNotification> SetChildNodesNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ShadowRootPoppedNotification> ShadowRootPoppedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ShadowRootPoppedNotification> result(new ShadowRootPoppedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* hostIdValue = object->get("hostId");
    errors->SetName("hostId");
    result->m_hostId = ValueConversions<int>::fromValue(hostIdValue, errors);
    protocol::Value* rootIdValue = object->get("rootId");
    errors->SetName("rootId");
    result->m_rootId = ValueConversions<int>::fromValue(rootIdValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ShadowRootPoppedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("hostId", ValueConversions<int>::toValue(m_hostId));
    result->setValue("rootId", ValueConversions<int>::toValue(m_rootId));
    return result;
}

void ShadowRootPoppedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("hostId"), m_hostId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("rootId"), m_rootId, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ShadowRootPoppedNotification> ShadowRootPoppedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ShadowRootPushedNotification> ShadowRootPushedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ShadowRootPushedNotification> result(new ShadowRootPushedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* hostIdValue = object->get("hostId");
    errors->SetName("hostId");
    result->m_hostId = ValueConversions<int>::fromValue(hostIdValue, errors);
    protocol::Value* rootValue = object->get("root");
    errors->SetName("root");
    result->m_root = ValueConversions<protocol::DOM::Node>::fromValue(rootValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ShadowRootPushedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("hostId", ValueConversions<int>::toValue(m_hostId));
    result->setValue("root", ValueConversions<protocol::DOM::Node>::toValue(m_root.get()));
    return result;
}

void ShadowRootPushedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("hostId"), m_hostId, out);
      v8_crdtp::SerializeField(v8_crdtp::SpanFrom("root"), m_root, out);
    out->push_back(v8_crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ShadowRootPushedNotification> ShadowRootPushedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::attributeModified(int nodeId, const String& name, const String& value)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<AttributeModifiedNotification> messageData = AttributeModifiedNotification::create()
        .setNodeId(nodeId)
        .setName(name)
        .setValue(value)
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.attributeModified", std::move(messageData)));
}

void Frontend::attributeRemoved(int nodeId, const String& name)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<AttributeRemovedNotification> messageData = AttributeRemovedNotification::create()
        .setNodeId(nodeId)
        .setName(name)
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.attributeRemoved", std::move(messageData)));
}

void Frontend::characterDataModified(int nodeId, const String& characterData)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<CharacterDataModifiedNotification> messageData = CharacterDataModifiedNotification::create()
        .setNodeId(nodeId)
        .setCharacterData(characterData)
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.characterDataModified", std::move(messageData)));
}

void Frontend::childNodeCountUpdated(int nodeId, int childNodeCount)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<ChildNodeCountUpdatedNotification> messageData = ChildNodeCountUpdatedNotification::create()
        .setNodeId(nodeId)
        .setChildNodeCount(childNodeCount)
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.childNodeCountUpdated", std::move(messageData)));
}

void Frontend::childNodeInserted(int parentNodeId, int previousNodeId, std::unique_ptr<protocol::DOM::Node> node)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<ChildNodeInsertedNotification> messageData = ChildNodeInsertedNotification::create()
        .setParentNodeId(parentNodeId)
        .setPreviousNodeId(previousNodeId)
        .setNode(std::move(node))
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.childNodeInserted", std::move(messageData)));
}

void Frontend::childNodeRemoved(int parentNodeId, int nodeId)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<ChildNodeRemovedNotification> messageData = ChildNodeRemovedNotification::create()
        .setParentNodeId(parentNodeId)
        .setNodeId(nodeId)
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.childNodeRemoved", std::move(messageData)));
}

void Frontend::distributedNodesUpdated(int insertionPointId, std::unique_ptr<protocol::Array<protocol::DOM::BackendNode>> distributedNodes)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<DistributedNodesUpdatedNotification> messageData = DistributedNodesUpdatedNotification::create()
        .setInsertionPointId(insertionPointId)
        .setDistributedNodes(std::move(distributedNodes))
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.distributedNodesUpdated", std::move(messageData)));
}

void Frontend::documentUpdated()
{
    if (!frontend_channel_)
        return;
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.documentUpdated"));
}

void Frontend::inlineStyleInvalidated(std::unique_ptr<protocol::Array<int>> nodeIds)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<InlineStyleInvalidatedNotification> messageData = InlineStyleInvalidatedNotification::create()
        .setNodeIds(std::move(nodeIds))
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.inlineStyleInvalidated", std::move(messageData)));
}

void Frontend::pseudoElementAdded(int parentId, std::unique_ptr<protocol::DOM::Node> pseudoElement)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<PseudoElementAddedNotification> messageData = PseudoElementAddedNotification::create()
        .setParentId(parentId)
        .setPseudoElement(std::move(pseudoElement))
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.pseudoElementAdded", std::move(messageData)));
}

void Frontend::pseudoElementRemoved(int parentId, int pseudoElementId)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<PseudoElementRemovedNotification> messageData = PseudoElementRemovedNotification::create()
        .setParentId(parentId)
        .setPseudoElementId(pseudoElementId)
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.pseudoElementRemoved", std::move(messageData)));
}

void Frontend::setChildNodes(int parentId, std::unique_ptr<protocol::Array<protocol::DOM::Node>> nodes)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<SetChildNodesNotification> messageData = SetChildNodesNotification::create()
        .setParentId(parentId)
        .setNodes(std::move(nodes))
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.setChildNodes", std::move(messageData)));
}

void Frontend::shadowRootPopped(int hostId, int rootId)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<ShadowRootPoppedNotification> messageData = ShadowRootPoppedNotification::create()
        .setHostId(hostId)
        .setRootId(rootId)
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.shadowRootPopped", std::move(messageData)));
}

void Frontend::shadowRootPushed(int hostId, std::unique_ptr<protocol::DOM::Node> root)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<ShadowRootPushedNotification> messageData = ShadowRootPushedNotification::create()
        .setHostId(hostId)
        .setRoot(std::move(root))
        .build();
    frontend_channel_->SendProtocolNotification(v8_crdtp::CreateNotification("DOM.shadowRootPushed", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const v8_crdtp::Dispatchable&)> Dispatch(v8_crdtp::span<uint8_t> command_name) override;

    void collectClassNamesFromSubtree(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void copyTo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void describeNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void disable(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void discardSearchResults(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void enable(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void focus(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getAttributes(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getBoxModel(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getContentQuads(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getDocument(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getFlattenedDocument(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getNodeForLocation(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getOuterHTML(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getRelayoutBoundary(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getSearchResults(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void markUndoableState(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void moveTo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void performSearch(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void pushNodeByPathToFrontend(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void pushNodesByBackendIdsToFrontend(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void querySelector(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void querySelectorAll(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void redo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void removeAttribute(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void removeNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void requestChildNodes(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void requestNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void resolveNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setAttributeValue(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setAttributesAsText(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setFileInputFiles(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setNodeStackTracesEnabled(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getNodeStackTraces(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getFileInfo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setInspectedNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setNodeName(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setNodeValue(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setOuterHTML(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void undo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getFrameOwner(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(v8_crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<v8_crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          v8_crdtp::SpanFrom("collectClassNamesFromSubtree"),
          &DomainDispatcherImpl::collectClassNamesFromSubtree
    },
    {
          v8_crdtp::SpanFrom("copyTo"),
          &DomainDispatcherImpl::copyTo
    },
    {
          v8_crdtp::SpanFrom("describeNode"),
          &DomainDispatcherImpl::describeNode
    },
    {
          v8_crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          v8_crdtp::SpanFrom("discardSearchResults"),
          &DomainDispatcherImpl::discardSearchResults
    },
    {
          v8_crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    {
          v8_crdtp::SpanFrom("focus"),
          &DomainDispatcherImpl::focus
    },
    {
          v8_crdtp::SpanFrom("getAttributes"),
          &DomainDispatcherImpl::getAttributes
    },
    {
          v8_crdtp::SpanFrom("getBoxModel"),
          &DomainDispatcherImpl::getBoxModel
    },
    {
          v8_crdtp::SpanFrom("getContentQuads"),
          &DomainDispatcherImpl::getContentQuads
    },
    {
          v8_crdtp::SpanFrom("getDocument"),
          &DomainDispatcherImpl::getDocument
    },
    {
          v8_crdtp::SpanFrom("getFileInfo"),
          &DomainDispatcherImpl::getFileInfo
    },
    {
          v8_crdtp::SpanFrom("getFlattenedDocument"),
          &DomainDispatcherImpl::getFlattenedDocument
    },
    {
          v8_crdtp::SpanFrom("getFrameOwner"),
          &DomainDispatcherImpl::getFrameOwner
    },
    {
          v8_crdtp::SpanFrom("getNodeForLocation"),
          &DomainDispatcherImpl::getNodeForLocation
    },
    {
          v8_crdtp::SpanFrom("getNodeStackTraces"),
          &DomainDispatcherImpl::getNodeStackTraces
    },
    {
          v8_crdtp::SpanFrom("getOuterHTML"),
          &DomainDispatcherImpl::getOuterHTML
    },
    {
          v8_crdtp::SpanFrom("getRelayoutBoundary"),
          &DomainDispatcherImpl::getRelayoutBoundary
    },
    {
          v8_crdtp::SpanFrom("getSearchResults"),
          &DomainDispatcherImpl::getSearchResults
    },
    {
          v8_crdtp::SpanFrom("markUndoableState"),
          &DomainDispatcherImpl::markUndoableState
    },
    {
          v8_crdtp::SpanFrom("moveTo"),
          &DomainDispatcherImpl::moveTo
    },
    {
          v8_crdtp::SpanFrom("performSearch"),
          &DomainDispatcherImpl::performSearch
    },
    {
          v8_crdtp::SpanFrom("pushNodeByPathToFrontend"),
          &DomainDispatcherImpl::pushNodeByPathToFrontend
    },
    {
          v8_crdtp::SpanFrom("pushNodesByBackendIdsToFrontend"),
          &DomainDispatcherImpl::pushNodesByBackendIdsToFrontend
    },
    {
          v8_crdtp::SpanFrom("querySelector"),
          &DomainDispatcherImpl::querySelector
    },
    {
          v8_crdtp::SpanFrom("querySelectorAll"),
          &DomainDispatcherImpl::querySelectorAll
    },
    {
          v8_crdtp::SpanFrom("redo"),
          &DomainDispatcherImpl::redo
    },
    {
          v8_crdtp::SpanFrom("removeAttribute"),
          &DomainDispatcherImpl::removeAttribute
    },
    {
          v8_crdtp::SpanFrom("removeNode"),
          &DomainDispatcherImpl::removeNode
    },
    {
          v8_crdtp::SpanFrom("requestChildNodes"),
          &DomainDispatcherImpl::requestChildNodes
    },
    {
          v8_crdtp::SpanFrom("requestNode"),
          &DomainDispatcherImpl::requestNode
    },
    {
          v8_crdtp::SpanFrom("resolveNode"),
          &DomainDispatcherImpl::resolveNode
    },
    {
          v8_crdtp::SpanFrom("setAttributeValue"),
          &DomainDispatcherImpl::setAttributeValue
    },
    {
          v8_crdtp::SpanFrom("setAttributesAsText"),
          &DomainDispatcherImpl::setAttributesAsText
    },
    {
          v8_crdtp::SpanFrom("setFileInputFiles"),
          &DomainDispatcherImpl::setFileInputFiles
    },
    {
          v8_crdtp::SpanFrom("setInspectedNode"),
          &DomainDispatcherImpl::setInspectedNode
    },
    {
          v8_crdtp::SpanFrom("setNodeName"),
          &DomainDispatcherImpl::setNodeName
    },
    {
          v8_crdtp::SpanFrom("setNodeStackTracesEnabled"),
          &DomainDispatcherImpl::setNodeStackTracesEnabled
    },
    {
          v8_crdtp::SpanFrom("setNodeValue"),
          &DomainDispatcherImpl::setNodeValue
    },
    {
          v8_crdtp::SpanFrom("setOuterHTML"),
          &DomainDispatcherImpl::setOuterHTML
    },
    {
          v8_crdtp::SpanFrom("undo"),
          &DomainDispatcherImpl::undo
    },
    };
    return commands;
  }();
  return v8_crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const v8_crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(v8_crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const v8_crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::collectClassNamesFromSubtree(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<String>> out_classNames;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->collectClassNamesFromSubtree(in_nodeId, &out_classNames);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.collectClassNamesFromSubtree"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("classNames"), out_classNames, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::copyTo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* targetNodeIdValue = params ? params->get("targetNodeId") : nullptr;
    errors->SetName("targetNodeId");
    int in_targetNodeId = ValueConversions<int>::fromValue(targetNodeIdValue, errors);
    protocol::Value* insertBeforeNodeIdValue = params ? params->get("insertBeforeNodeId") : nullptr;
    Maybe<int> in_insertBeforeNodeId;
    if (insertBeforeNodeIdValue) {
        errors->SetName("insertBeforeNodeId");
        in_insertBeforeNodeId = ValueConversions<int>::fromValue(insertBeforeNodeIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    int out_nodeId;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->copyTo(in_nodeId, in_targetNodeId, std::move(in_insertBeforeNodeId), &out_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.copyTo"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), out_nodeId, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::describeNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    Maybe<int> in_nodeId;
    if (nodeIdValue) {
        errors->SetName("nodeId");
        in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    }
    protocol::Value* backendNodeIdValue = params ? params->get("backendNodeId") : nullptr;
    Maybe<int> in_backendNodeId;
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        in_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    Maybe<String> in_objectId;
    if (objectIdValue) {
        errors->SetName("objectId");
        in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    }
    protocol::Value* depthValue = params ? params->get("depth") : nullptr;
    Maybe<int> in_depth;
    if (depthValue) {
        errors->SetName("depth");
        in_depth = ValueConversions<int>::fromValue(depthValue, errors);
    }
    protocol::Value* pierceValue = params ? params->get("pierce") : nullptr;
    Maybe<bool> in_pierce;
    if (pierceValue) {
        errors->SetName("pierce");
        in_pierce = ValueConversions<bool>::fromValue(pierceValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::DOM::Node> out_node;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->describeNode(std::move(in_nodeId), std::move(in_backendNodeId), std::move(in_objectId), std::move(in_depth), std::move(in_pierce), &out_node);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.describeNode"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("node"), out_node, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::disable(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::discardSearchResults(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* searchIdValue = params ? params->get("searchId") : nullptr;
    errors->SetName("searchId");
    String in_searchId = ValueConversions<String>::fromValue(searchIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->discardSearchResults(in_searchId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.discardSearchResults"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::enable(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::focus(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    Maybe<int> in_nodeId;
    if (nodeIdValue) {
        errors->SetName("nodeId");
        in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    }
    protocol::Value* backendNodeIdValue = params ? params->get("backendNodeId") : nullptr;
    Maybe<int> in_backendNodeId;
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        in_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    Maybe<String> in_objectId;
    if (objectIdValue) {
        errors->SetName("objectId");
        in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->focus(std::move(in_nodeId), std::move(in_backendNodeId), std::move(in_objectId));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.focus"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::getAttributes(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<String>> out_attributes;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getAttributes(in_nodeId, &out_attributes);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getAttributes"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("attributes"), out_attributes, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getBoxModel(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    Maybe<int> in_nodeId;
    if (nodeIdValue) {
        errors->SetName("nodeId");
        in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    }
    protocol::Value* backendNodeIdValue = params ? params->get("backendNodeId") : nullptr;
    Maybe<int> in_backendNodeId;
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        in_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    Maybe<String> in_objectId;
    if (objectIdValue) {
        errors->SetName("objectId");
        in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::DOM::BoxModel> out_model;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getBoxModel(std::move(in_nodeId), std::move(in_backendNodeId), std::move(in_objectId), &out_model);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getBoxModel"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("model"), out_model, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getContentQuads(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    Maybe<int> in_nodeId;
    if (nodeIdValue) {
        errors->SetName("nodeId");
        in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    }
    protocol::Value* backendNodeIdValue = params ? params->get("backendNodeId") : nullptr;
    Maybe<int> in_backendNodeId;
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        in_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    Maybe<String> in_objectId;
    if (objectIdValue) {
        errors->SetName("objectId");
        in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<protocol::Array<double>>> out_quads;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getContentQuads(std::move(in_nodeId), std::move(in_backendNodeId), std::move(in_objectId), &out_quads);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getContentQuads"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("quads"), out_quads, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getDocument(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* depthValue = params ? params->get("depth") : nullptr;
    Maybe<int> in_depth;
    if (depthValue) {
        errors->SetName("depth");
        in_depth = ValueConversions<int>::fromValue(depthValue, errors);
    }
    protocol::Value* pierceValue = params ? params->get("pierce") : nullptr;
    Maybe<bool> in_pierce;
    if (pierceValue) {
        errors->SetName("pierce");
        in_pierce = ValueConversions<bool>::fromValue(pierceValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::DOM::Node> out_root;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getDocument(std::move(in_depth), std::move(in_pierce), &out_root);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getDocument"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("root"), out_root, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getFlattenedDocument(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* depthValue = params ? params->get("depth") : nullptr;
    Maybe<int> in_depth;
    if (depthValue) {
        errors->SetName("depth");
        in_depth = ValueConversions<int>::fromValue(depthValue, errors);
    }
    protocol::Value* pierceValue = params ? params->get("pierce") : nullptr;
    Maybe<bool> in_pierce;
    if (pierceValue) {
        errors->SetName("pierce");
        in_pierce = ValueConversions<bool>::fromValue(pierceValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<protocol::DOM::Node>> out_nodes;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getFlattenedDocument(std::move(in_depth), std::move(in_pierce), &out_nodes);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getFlattenedDocument"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodes"), out_nodes, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getNodeForLocation(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* xValue = params ? params->get("x") : nullptr;
    errors->SetName("x");
    int in_x = ValueConversions<int>::fromValue(xValue, errors);
    protocol::Value* yValue = params ? params->get("y") : nullptr;
    errors->SetName("y");
    int in_y = ValueConversions<int>::fromValue(yValue, errors);
    protocol::Value* includeUserAgentShadowDOMValue = params ? params->get("includeUserAgentShadowDOM") : nullptr;
    Maybe<bool> in_includeUserAgentShadowDOM;
    if (includeUserAgentShadowDOMValue) {
        errors->SetName("includeUserAgentShadowDOM");
        in_includeUserAgentShadowDOM = ValueConversions<bool>::fromValue(includeUserAgentShadowDOMValue, errors);
    }
    protocol::Value* ignorePointerEventsNoneValue = params ? params->get("ignorePointerEventsNone") : nullptr;
    Maybe<bool> in_ignorePointerEventsNone;
    if (ignorePointerEventsNoneValue) {
        errors->SetName("ignorePointerEventsNone");
        in_ignorePointerEventsNone = ValueConversions<bool>::fromValue(ignorePointerEventsNoneValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    int out_backendNodeId;
    String out_frameId;
    Maybe<int> out_nodeId;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getNodeForLocation(in_x, in_y, std::move(in_includeUserAgentShadowDOM), std::move(in_ignorePointerEventsNone), &out_backendNodeId, &out_frameId, &out_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getNodeForLocation"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("backendNodeId"), out_backendNodeId, &result);
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("frameId"), out_frameId, &result);
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), out_nodeId, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getOuterHTML(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    Maybe<int> in_nodeId;
    if (nodeIdValue) {
        errors->SetName("nodeId");
        in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    }
    protocol::Value* backendNodeIdValue = params ? params->get("backendNodeId") : nullptr;
    Maybe<int> in_backendNodeId;
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        in_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    Maybe<String> in_objectId;
    if (objectIdValue) {
        errors->SetName("objectId");
        in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    String out_outerHTML;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getOuterHTML(std::move(in_nodeId), std::move(in_backendNodeId), std::move(in_objectId), &out_outerHTML);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getOuterHTML"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("outerHTML"), out_outerHTML, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getRelayoutBoundary(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    int out_nodeId;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getRelayoutBoundary(in_nodeId, &out_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getRelayoutBoundary"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), out_nodeId, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getSearchResults(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* searchIdValue = params ? params->get("searchId") : nullptr;
    errors->SetName("searchId");
    String in_searchId = ValueConversions<String>::fromValue(searchIdValue, errors);
    protocol::Value* fromIndexValue = params ? params->get("fromIndex") : nullptr;
    errors->SetName("fromIndex");
    int in_fromIndex = ValueConversions<int>::fromValue(fromIndexValue, errors);
    protocol::Value* toIndexValue = params ? params->get("toIndex") : nullptr;
    errors->SetName("toIndex");
    int in_toIndex = ValueConversions<int>::fromValue(toIndexValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<int>> out_nodeIds;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getSearchResults(in_searchId, in_fromIndex, in_toIndex, &out_nodeIds);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getSearchResults"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeIds"), out_nodeIds, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::markUndoableState(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->markUndoableState();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.markUndoableState"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::moveTo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* targetNodeIdValue = params ? params->get("targetNodeId") : nullptr;
    errors->SetName("targetNodeId");
    int in_targetNodeId = ValueConversions<int>::fromValue(targetNodeIdValue, errors);
    protocol::Value* insertBeforeNodeIdValue = params ? params->get("insertBeforeNodeId") : nullptr;
    Maybe<int> in_insertBeforeNodeId;
    if (insertBeforeNodeIdValue) {
        errors->SetName("insertBeforeNodeId");
        in_insertBeforeNodeId = ValueConversions<int>::fromValue(insertBeforeNodeIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    int out_nodeId;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->moveTo(in_nodeId, in_targetNodeId, std::move(in_insertBeforeNodeId), &out_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.moveTo"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), out_nodeId, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::performSearch(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* queryValue = params ? params->get("query") : nullptr;
    errors->SetName("query");
    String in_query = ValueConversions<String>::fromValue(queryValue, errors);
    protocol::Value* includeUserAgentShadowDOMValue = params ? params->get("includeUserAgentShadowDOM") : nullptr;
    Maybe<bool> in_includeUserAgentShadowDOM;
    if (includeUserAgentShadowDOMValue) {
        errors->SetName("includeUserAgentShadowDOM");
        in_includeUserAgentShadowDOM = ValueConversions<bool>::fromValue(includeUserAgentShadowDOMValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    String out_searchId;
    int out_resultCount;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->performSearch(in_query, std::move(in_includeUserAgentShadowDOM), &out_searchId, &out_resultCount);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.performSearch"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("searchId"), out_searchId, &result);
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("resultCount"), out_resultCount, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::pushNodeByPathToFrontend(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* pathValue = params ? params->get("path") : nullptr;
    errors->SetName("path");
    String in_path = ValueConversions<String>::fromValue(pathValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    int out_nodeId;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->pushNodeByPathToFrontend(in_path, &out_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.pushNodeByPathToFrontend"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), out_nodeId, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::pushNodesByBackendIdsToFrontend(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* backendNodeIdsValue = params ? params->get("backendNodeIds") : nullptr;
    errors->SetName("backendNodeIds");
    std::unique_ptr<protocol::Array<int>> in_backendNodeIds = ValueConversions<protocol::Array<int>>::fromValue(backendNodeIdsValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<int>> out_nodeIds;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->pushNodesByBackendIdsToFrontend(std::move(in_backendNodeIds), &out_nodeIds);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.pushNodesByBackendIdsToFrontend"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeIds"), out_nodeIds, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::querySelector(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* selectorValue = params ? params->get("selector") : nullptr;
    errors->SetName("selector");
    String in_selector = ValueConversions<String>::fromValue(selectorValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    int out_nodeId;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->querySelector(in_nodeId, in_selector, &out_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.querySelector"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), out_nodeId, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::querySelectorAll(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* selectorValue = params ? params->get("selector") : nullptr;
    errors->SetName("selector");
    String in_selector = ValueConversions<String>::fromValue(selectorValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<int>> out_nodeIds;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->querySelectorAll(in_nodeId, in_selector, &out_nodeIds);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.querySelectorAll"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeIds"), out_nodeIds, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::redo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->redo();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.redo"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::removeAttribute(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* nameValue = params ? params->get("name") : nullptr;
    errors->SetName("name");
    String in_name = ValueConversions<String>::fromValue(nameValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->removeAttribute(in_nodeId, in_name);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.removeAttribute"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::removeNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->removeNode(in_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.removeNode"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::requestChildNodes(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* depthValue = params ? params->get("depth") : nullptr;
    Maybe<int> in_depth;
    if (depthValue) {
        errors->SetName("depth");
        in_depth = ValueConversions<int>::fromValue(depthValue, errors);
    }
    protocol::Value* pierceValue = params ? params->get("pierce") : nullptr;
    Maybe<bool> in_pierce;
    if (pierceValue) {
        errors->SetName("pierce");
        in_pierce = ValueConversions<bool>::fromValue(pierceValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->requestChildNodes(in_nodeId, std::move(in_depth), std::move(in_pierce));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.requestChildNodes"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::requestNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    errors->SetName("objectId");
    String in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    int out_nodeId;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->requestNode(in_objectId, &out_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.requestNode"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), out_nodeId, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::resolveNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    Maybe<int> in_nodeId;
    if (nodeIdValue) {
        errors->SetName("nodeId");
        in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    }
    protocol::Value* backendNodeIdValue = params ? params->get("backendNodeId") : nullptr;
    Maybe<int> in_backendNodeId;
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        in_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* objectGroupValue = params ? params->get("objectGroup") : nullptr;
    Maybe<String> in_objectGroup;
    if (objectGroupValue) {
        errors->SetName("objectGroup");
        in_objectGroup = ValueConversions<String>::fromValue(objectGroupValue, errors);
    }
    protocol::Value* executionContextIdValue = params ? params->get("executionContextId") : nullptr;
    Maybe<int> in_executionContextId;
    if (executionContextIdValue) {
        errors->SetName("executionContextId");
        in_executionContextId = ValueConversions<int>::fromValue(executionContextIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Runtime::RemoteObject> out_object;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->resolveNode(std::move(in_nodeId), std::move(in_backendNodeId), std::move(in_objectGroup), std::move(in_executionContextId), &out_object);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.resolveNode"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("object"), out_object, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::setAttributeValue(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* nameValue = params ? params->get("name") : nullptr;
    errors->SetName("name");
    String in_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* valueValue = params ? params->get("value") : nullptr;
    errors->SetName("value");
    String in_value = ValueConversions<String>::fromValue(valueValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setAttributeValue(in_nodeId, in_name, in_value);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.setAttributeValue"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setAttributesAsText(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* textValue = params ? params->get("text") : nullptr;
    errors->SetName("text");
    String in_text = ValueConversions<String>::fromValue(textValue, errors);
    protocol::Value* nameValue = params ? params->get("name") : nullptr;
    Maybe<String> in_name;
    if (nameValue) {
        errors->SetName("name");
        in_name = ValueConversions<String>::fromValue(nameValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setAttributesAsText(in_nodeId, in_text, std::move(in_name));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.setAttributesAsText"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setFileInputFiles(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* filesValue = params ? params->get("files") : nullptr;
    errors->SetName("files");
    std::unique_ptr<protocol::Array<String>> in_files = ValueConversions<protocol::Array<String>>::fromValue(filesValue, errors);
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    Maybe<int> in_nodeId;
    if (nodeIdValue) {
        errors->SetName("nodeId");
        in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    }
    protocol::Value* backendNodeIdValue = params ? params->get("backendNodeId") : nullptr;
    Maybe<int> in_backendNodeId;
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        in_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    Maybe<String> in_objectId;
    if (objectIdValue) {
        errors->SetName("objectId");
        in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setFileInputFiles(std::move(in_files), std::move(in_nodeId), std::move(in_backendNodeId), std::move(in_objectId));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.setFileInputFiles"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setNodeStackTracesEnabled(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* enableValue = params ? params->get("enable") : nullptr;
    errors->SetName("enable");
    bool in_enable = ValueConversions<bool>::fromValue(enableValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setNodeStackTracesEnabled(in_enable);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.setNodeStackTracesEnabled"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::getNodeStackTraces(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    Maybe<protocol::Runtime::StackTrace> out_creation;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getNodeStackTraces(in_nodeId, &out_creation);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getNodeStackTraces"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("creation"), out_creation, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getFileInfo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    errors->SetName("objectId");
    String in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    String out_path;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getFileInfo(in_objectId, &out_path);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getFileInfo"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("path"), out_path, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::setInspectedNode(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setInspectedNode(in_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.setInspectedNode"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setNodeName(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* nameValue = params ? params->get("name") : nullptr;
    errors->SetName("name");
    String in_name = ValueConversions<String>::fromValue(nameValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    int out_nodeId;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setNodeName(in_nodeId, in_name, &out_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.setNodeName"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), out_nodeId, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::setNodeValue(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* valueValue = params ? params->get("value") : nullptr;
    errors->SetName("value");
    String in_value = ValueConversions<String>::fromValue(valueValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setNodeValue(in_nodeId, in_value);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.setNodeValue"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setOuterHTML(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* outerHTMLValue = params ? params->get("outerHTML") : nullptr;
    errors->SetName("outerHTML");
    String in_outerHTML = ValueConversions<String>::fromValue(outerHTMLValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setOuterHTML(in_nodeId, in_outerHTML);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.setOuterHTML"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::undo(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->undo();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.undo"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::getFrameOwner(const v8_crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* frameIdValue = params ? params->get("frameId") : nullptr;
    errors->SetName("frameId");
    String in_frameId = ValueConversions<String>::fromValue(frameIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    int out_backendNodeId;
    Maybe<int> out_nodeId;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getFrameOwner(in_frameId, &out_backendNodeId, &out_nodeId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), v8_crdtp::SpanFrom("DOM.getFrameOwner"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          v8_crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(v8_crdtp::cbor::EncodeIndefiniteLengthMapStart());
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("backendNodeId"), out_backendNodeId, &result);
            v8_crdtp::SerializeField(v8_crdtp::SpanFrom("nodeId"), out_nodeId, &result);
          result.push_back(v8_crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, v8_crdtp::Serializable::From(std::move(result)));
      }
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<v8_crdtp::span<uint8_t>, v8_crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<v8_crdtp::span<uint8_t>, v8_crdtp::span<uint8_t>>>{
          { v8_crdtp::SpanFrom("DOM.hideHighlight"), v8_crdtp::SpanFrom("Overlay.hideHighlight") },
          { v8_crdtp::SpanFrom("DOM.highlightNode"), v8_crdtp::SpanFrom("Overlay.highlightNode") },
          { v8_crdtp::SpanFrom("DOM.highlightRect"), v8_crdtp::SpanFrom("Overlay.highlightRect") },
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(v8_crdtp::SpanFrom("DOM"), SortedRedirects(), std::move(dispatcher));
}

} // DOM
} // namespace v8_inspector
} // namespace protocol
